version: "3.3"
services:
  mongo:
    container_name: mongo
    build: ./mongo/.
    restart: on-failure
    image: mongo:latest
    ports:
      - "27017:27017"
    networks:
      - network
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: user_name
#      MONGO_INITDB_ROOT_PASSWORD: user_password
  ws:
    container_name: websocket
    restart: always
    build: ./webSocket/.
    ports:
      - "8200:3000"
      - "8201:3001"
    networks:
      - network
  mock:
    container_name: mock
    restart: always
    build: ./deviceMock/.
    environment:
      - mock_name=mock
      - mock_port=8101
      - local_ip=192.168.1.50
    ports:
      - "8101:3000"
    networks:
      - network
  mock2:
    container_name: mock2
    restart: always
    build: ./deviceMock/.
    environment:
      - mock_name=mock2
      - mock_port=8102
      - local_ip=192.168.1.50
    ports:
      - "8102:3000"
    networks:
      - network
  # mock3:
  #   container_name: mock3
  #   restart: always
  #   build: ./deviceMock/.
  #   environment:
  #     - mock_name=mock3
  #     - mock_port=8103
  #     - local_ip=192.168.1.50
  #   ports:
  #     - "8103:3000"
  #   networks:
  #     - network
  # mock4:
  #   container_name: mock4
  #   restart: always
  #   build: ./deviceMock/.
  #   environment:
  #     - mock_name=mock4
  #     - mock_port=8104
  #     - local_ip=192.168.1.50
  #   ports:
  #     - "8104:3000"
  #   networks:
  #     - network
  sensortemperature:
    container_name: sensorTemperature
    restart: always
    build: ./sensorMock/.
    environment:
      - mock_name=sensorTemperature
      - mock_port=8105
      - local_ip=192.168.1.50
    ports:
      - "8105:3000"
    networks:
      - network
  sensorhumidity:
    container_name: sensorHumidity
    restart: always
    build: ./sensorHumidityMock/.
    environment:
      - mock_name=sensorHumidity
      - mock_port=8106
      - local_ip=192.168.1.50
    ports:
      - "8106:3000"
    networks:
      - network
  cortijo:
    container_name: cortijo
    restart: on-failure
    build: ./cortijo/.
    ports:
      - "8000:3000"
    links:
      - mongo
    networks:
      - network
    volumes:
        - /etc/localtime:/etc/localtime:ro
  watering:
    container_name: watering
    restart: on-failure
    build: ./wateringTiming/.
    volumes:
        - /etc/localtime:/etc/localtime:ro
  auth:
    container_name: auth
    restart: always
    build: ./auth/.
    environment:
      - token_password=cortijo1
    ports:
      - "8010:3000"
    links:
      - mongo
    networks:
      - network
#  front:
#    container_name: front
#    restart: always
#    build: ./frontAng/.
#    ports:
#      - "443:80"
#    networks:
#      - network
  front:
    container_name: front
    restart: always
    build: ./frontAngTest/.
    ports:
      - "8300:4200"
  git:
    container_name: git
    restart: on-failure
    build: ./git/.
  ip:
    container_name: ip
    restart: on-failure
    build: ./ip/.
#  fp:
#    container_name: fp
#    restart: on-failure
#    build: ./functionalPing/.
  camera:
    container_name: camera
    restart: on-failure
    build: ./camera/.
    ports:
      - "8400:3000"
    volumes:
        - type: bind
          source: /home/lenovo/eramos
          target: /root/node/eramos
  file:
    container_name: file
    restart: on-failure
    build: ./fileApi/.
    ports:
      - "8500:3000"
    volumes:
        - type: bind
          source: /home/lenovo/eramosFiles
          target: /scr/files/
networks:
  network:
